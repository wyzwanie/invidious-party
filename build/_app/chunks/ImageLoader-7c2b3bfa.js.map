{"version":3,"file":"ImageLoader-7c2b3bfa.js","sources":["../../../../../src/lib/ImageLoader/IntersectionObserver.svelte","../../../../../src/lib/ImageLoader/Image.svelte","../../../../../src/lib/ImageLoader/ImageLoader.svelte"],"sourcesContent":["<script>\n\timport { onMount } from 'svelte'\n\n\texport let once = false\n\texport let top = 0\n\texport let bottom = 0\n\texport let left = 0\n\texport let right = 0\n\n    let intersecting = false\n\tlet container\n  \n\tonMount(() => {\n\t\tif (typeof IntersectionObserver !== 'undefined') {\n\t\t\tconst rootMargin = `${bottom}px ${left}px ${top}px ${right}px`\n\t\t\tconst observer = new IntersectionObserver(entries => {\n\t\t\t\tintersecting = entries[0].isIntersecting\n\t\t\t\tif (intersecting && once) {\n\t\t\t\t\tobserver.unobserve(container)\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\trootMargin\n\t\t\t})\n\t\t\tobserver.observe(container)\n\t\t\treturn () => observer.unobserve(container)\n\t\t}\n\t\tfunction handler() {\n\t\t\tconst bcr = container.getBoundingClientRect()\n\t\t\tintersecting = (\n\t\t\t\t(bcr.bottom + bottom) > 0 &&\n\t\t\t\t(bcr.right + right) > 0 &&\n\t\t\t\t(bcr.top - top) < window.innerHeight &&\n\t\t\t\t(bcr.left - left) < window.innerWidth\n\t\t\t)\n\t\t\tif (intersecting && once) {\n\t\t\t\twindow.removeEventListener('scroll', handler)\n\t\t\t}\n\t\t}\n\t\twindow.addEventListener('scroll', handler)\n\t\treturn () => window.removeEventListener('scroll', handler)\n\t})\n</script>\n\n<div bind:this={container}>\n\t<slot {intersecting}></slot>\n</div>\n\n<style>\ndiv {\n    width: 100%;\n    height: 100%;\n}\n</style>","<script>\n    import { onMount } from 'svelte'\n    import { chooseInstance } from '$lib/helper'\n    import { instances } from '$lib/Stores/localStore'\n\n    export let src\n    export let alt\n    export let size = '320x180'\n    \n    let loaded = false\n    let thisImage\n\n    onMount(() => {\n        thisImage.onload = () => loaded = true\n    })\n    const replaceImage = () => {\n        console.log('replacing')\n        const src = thisImage.src\n        const url = new URL(src).host\n        thisImage.src = `https://${chooseInstance($instances)}${src.split(url)[1]}`\n    }\n</script>\n\n<img {src} {alt} class:loaded bind:this={thisImage} loading=\"lazy\" on:error={replaceImage} />\n\n{#if !loaded}\n    <svg class:loaded viewBox=\"0 0 {size.split('x')[0]} {size.split('x')[1]}\"><rect width=\"100%\" height=\"100%\" fill=\"var(--text-100)\"/></svg>\n{/if}\n\n<style>\nsvg {\n    height: auto;\n    transition: all 0.3s ease-out;\n}\nsvg.loaded {\n    width: 0;\n    max-height: 0;\n    height: 0;\n    transform-box: view-box;\n    transform: scale(0);\n    visibility: hidden;\n    display: none;\n}\nsvg.loaded rect {\n    width: 0;\n    max-height: 0;\n    height: 0;\n    transform-box: view-box;\n    transform: scale(0);\n    visibility: hidden\n}\nimg {\n    height: 0;\n    opacity: 0;\n    transition: opacity 0.6s ease-out;\n}\nimg.loaded {\n    height: 100%;\n    opacity: 1;\n    object-fit: cover;\n    object-position: center;\n}\n</style>\n","<script>\n    import { onMount } from 'svelte'\n    \n    import IntersectionObserver from './IntersectionObserver.svelte'\n    import Image from './Image.svelte'\n\n    export let src\n    export let alt\n    export let size\n    \n    let nativeLoading = false\n    // Determine whether to bypass our intersecting check\n    onMount(() => {\n      if ('loading' in HTMLImageElement.prototype) {\n        nativeLoading = true\n      }\n    })\n    \n  </script>\n  \n  <IntersectionObserver once={true} let:intersecting={intersecting}>\n    {#if intersecting || nativeLoading}\n      <Image {alt} {src} {size} />\n    {/if}\n  </IntersectionObserver> "],"names":["container","once","top","bottom","left","right","intersecting","IntersectionObserver","observer","entries","isIntersecting","unobserve","rootMargin","observe","bcr","getBoundingClientRect","window","innerHeight","innerWidth","removeEventListener","handler","addEventListener","ctx","split","ctx2","thisImage","src","alt","size","loaded","onload","log","src2","url","URL","host","chooseInstance","$instances","nativeLoading","HTMLImageElement","prototype"],"mappings":"kvBAUKA,mCAPOC,GAAO,UACPC,EAAM,aACNC,EAAS,WACTC,EAAO,YACPC,EAAQ,KAEZC,GAAe,oBAIe,oBAAzBC,4BAEJC,MAAeD,8BACpBD,EAAeG,EAAQ,GAAGC,gBACtBJ,GAAgBL,KACVU,UAAUX,MAGpBY,cAPqBT,OAAYC,OAAUF,OAASG,iBAS5CQ,QAAQb,OACJQ,EAASG,UAAUX,sBAG1Bc,EAAMd,EAAUe,4BACtBT,EACEQ,EAAIX,OAASA,EAAU,GACvBW,EAAIT,MAAQA,EAAS,GACrBS,EAAIZ,IAAMA,EAAOc,OAAOC,aACxBH,EAAIV,KAAOA,EAAQY,OAAOE,YAExBZ,GAAgBL,UACZkB,oBAAoB,SAAUC,iBAGhCC,iBAAiB,SAAUD,OACrBJ,OAAOG,oBAAoB,SAAUC,2rBCbhBE,KAAKC,MAAM,KAAK,OAAKD,KAAKC,MAAM,KAAK,wGAArCC,KAAKD,MAAM,KAAK,OAAKC,KAAKD,MAAM,KAAK,+FADnED,0VAFuEA,uGAEvEE,6LAfEC,OALOC,UACAC,WACAC,EAAO,aAEdC,GAAS,cAITJ,EAAUK,eAAeD,GAAS,+HAG1BE,IAAI,mBACNC,EAAMP,EAAUC,IAChBO,MAAUC,IAAIF,GAAKG,SACzBV,EAAUC,eAAiBU,EAAeC,KAAcL,EAAIT,MAAMU,GAAK,oeCEtDX,sGAAhBE,MAAgBA,gOADK,wBAAwBlB,aAAAA,eAAAA,aAAAA,iRAdvCoB,UACAC,WACAC,KAEPU,GAAgB,iBAGd,YAAaC,iBAAiBC,eAChCF,GAAgB"}