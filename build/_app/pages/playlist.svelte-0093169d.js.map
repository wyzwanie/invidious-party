{"version":3,"file":"playlist.svelte-0093169d.js","sources":["../../../../../src/lib/Components/ListOfVideos.svelte","../../../../../src/routes/playlist.svelte"],"sourcesContent":["<script>\n    import { createEventDispatcher } from 'svelte'\n\n    export let aktiv\n    export let chosen\n    export let videos\n\n    const dispatch = createEventDispatcher()\n\n    const extractThumbnail = videoThumbnails => {\n        const index = videoThumbnails.findIndex(x => x.quality === 'medium')\n        if(index > -1) return videoThumbnails[index].url.split('/vi/')[1]\n        else return false\n    }\n\n    const handleClick = (videoID, index) => {\n        if(aktiv === index) return false\n        dispatch('play', videoID)\n    }\n</script>\n\n{#if videos && chosen}\n    {#each videos as video, index}\n        <div class=\"wrapper {aktiv === index ? 'active' : ''}\"\n            on:click={() => handleClick(video.videoId, index)}>\n            <img src=\"https://{chosen}/vi/{extractThumbnail(video.videoThumbnails)}\" alt=\"{video.thumbnail}\">\n            <div class=\"title\">{video.title}</div>\n        </div>\n    {/each}\n{/if}\n\n<style>\n.wrapper {\n    display: flex;\n    align-items: center;\n    border-bottom: 1px solid rgb(241 241 241 / 4%);\n    cursor: pointer;\n}\n.wrapper img {\n    height: 5em;\n}\n.active {\n    background: var(--text-130);\n    border: none;\n}\n.active .title {\n    color: var(--text--80);\n}\n.title {\n    color: var(--text--50);\n    padding: 0 7px;\n}\n</style>","<script>\n    import { onMount, afterUpdate } from 'svelte'\n    import { page } from '$app/stores'\n    import { chosen } from '$lib/Stores/memoryStore'\n    import { instances } from '$lib/Stores/localStore'\n    import { chooseInstance, validatePlaylistID } from '$lib/helper'\n\n    import AsyncError from '$lib/Components/AsyncError.svelte'\n    import AsyncLoading from '$lib/Components/AsyncLoading.svelte'\n    import ListOfVideos from '$lib/Components/ListOfVideos.svelte'\n    import Video from '$lib/Components/Video.svelte'\n    import VideoInfo from '$lib/Components/VideoInfo.svelte'\n\n    let active = 0\n    let currentVideo\n    let videoAPI\n    let playlistID\n    let isPlaylistIDvalid\n    let retry = false\n    let videoContainer\n\n    const getPlaylistID = () => {\n        playlistID = $page.query.get('list')\n        isPlaylistIDvalid = validatePlaylistID(playlistID)\n    }\n\n    const fetchPlaylist = async (instance, playlistID) => {\n        if(!instance) instance = chooseInstance($instances)\n\n        try {\n            console.log('start')\n            const req = await fetch(`https://${instance}/api/v1/playlists/${playlistID}`)\n            const res = await req.json()\n\n            if(res.playlistId && res.videos) {\n                currentVideo = res.videos[0].videoId\n                videoAPI = await fetchVideo(instance, currentVideo)\n                return res\n            } else {\n                throw new Error(res)\n            }\n        } catch(err) {\n            const index = $instances.findIndex(x => x[0] === instance)\n            if(index < 0) return retry = true\n            $instances[index][1].failedRequests++\n            $instances[index][1].lastFailedRequest = new Date().getTime()\n            $instances = $instances\n            retry = true\n            throw new Error(err)\n        }\n    }\n\n\tconst fetchVideo = async (instance, videoID) => {\n        if(!instance) instance = chooseInstance($instances)\n\n        try {\n            const req = await fetch(`https://${instance}/api/v1/videos/${videoID}?fields=error,videoId,title,descriptionHtml,published,keywords,viewCount,likeCount,dislikeCount,paid,premium,isFamilyFriendly,author,authorId,authorThumbnails,lengthSeconds,allowRatings,rating,isListed,liveNow,dashUrl,adaptiveFormats,formatStreams,captions,recommendedVideos,subCountText`) //\n            const res = await req.json()\n            \n            if(res.videoId) return res\n            else throw new Error('no kurwa???')\n\t\t} catch(err) {\n            const index = $instances.findIndex(x => x[0] === instance)\n            if(index < 0) return retry = true\n            $instances[index][1].failedRequests++\n            $instances[index][1].lastFailedRequest = new Date().getTime()\n            $instances = $instances\n            retry = true\n            throw new Error(err)\n\t\t}\n\t}\n\n    const updateCurrentVideo = async e => {\n        currentVideo = e.detail\n        videoAPI = await fetchVideo($chosen, currentVideo)\n    }\n\n    onMount(() => getPlaylistID())\n    afterUpdate(() => getPlaylistID())\n\n    $: if(retry) {\n        retry = false\n        $chosen = chooseInstance($instances)\n    }\n</script>\n\n{#if isPlaylistIDvalid}\n    <div class=\"container\">\n        {#await fetchPlaylist($chosen, playlistID)}\n            <AsyncLoading chosen={$chosen} />\n        {:then playlist}\n            <div class=\"playlist\">\n                <!-- <pre>\n                    pre: {JSON.stringify(playlist, null, 4)}\n                </pre> -->\n                <div class=\"info\">\n                    <h3>{playlist.title}</h3>\n                    <h4><span>by:</span> {playlist.author}</h4>\n                </div>\n                <div class=\"wrapper\">\n                    <div class=\"video\">\n                        {#if currentVideo}\n                            {#key currentVideo}\n                                <div class=\"top\" bind:this={videoContainer}>\n                                    <Video chosen={$chosen} {videoAPI} borderRadiusTop={false} />\n                                </div>\n                                <div class=\"bottom\">\n                                    <VideoInfo chosen={$chosen} {videoAPI} />\n                                </div>\n                            {/key}\n                        {/if}\n                    </div>\n                    <div class=\"videoList\" style=\"height:{videoContainer ? videoContainer.offsetHeight-1 : 0}px;overflow:auto;\">\n                        <ListOfVideos {active} chosen={$chosen}\n                            videos={playlist.videos}\n                            aktiv={playlist.videos.findIndex(x => x.videoId === currentVideo)}\n                            on:play={updateCurrentVideo}\n                        />\n                    </div>\n                </div>\n            </div>\n        {:catch error}\n            <AsyncError {error} />\n        {/await}\n    </div>\n{:else}\n    ERROR: invalid playlistID\n{/if}\n\n<style>\n.info {\n    padding: 7px;\n    background: var(--bg-2);\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    border: 1px solid var(--border);\n    border-bottom: none;\n}\n.wrapper {\n    display: flex;\n}\n.video {\n    flex: 5;\n}\n.top {\n    background: var(--bg-1);\n    border: 1px solid var(--border);\n    border-bottom-left-radius: 5px;\n    border-right: none;\n    border-top: none;\n}\n.videoList {\n    flex: 2;\n    background: var(--bg-1);\n    border-right: 1px solid var(--border);\n    border-bottom: 1px solid var(--border);\n    border-bottom-right-radius: 5px;\n}\n</style>"],"names":["ctx","length","ctx2","title","videoThumbnails","thumbnail","aktiv","chosen","videos","dispatch","createEventDispatcher","handleClick","videoID","index","findIndex","x","quality","url","split","video","videoId","author","offsetHeight","active","currentVideo","videoAPI","playlistID","isPlaylistIDvalid","videoContainer","retry","getPlaylistID","$page","query","get","validatePlaylistID","fetchVideo","instance2","chooseInstance","$instances","req","fetch","res","json","Error","err","failedRequests","lastFailedRequest","Date","getTime","$chosen","playlistID2","log","playlistId","e","detail"],"mappings":"kxBAsBWA,0BAALC,2NAAKC,aAALD,qIAAAA,yEAI0BD,KAAMG,4TADPH,YAAYA,KAAiBA,KAAMI,4CAAyBJ,KAAMK,4GAF1DL,KAAQ,SAAW,4IAE3BA,YAAYA,KAAiBA,KAAMI,4CAAyBJ,KAAMK,qCACjEL,KAAMG,iDAHCH,KAAQ,SAAW,qFAFrDA,MAAUA,kGAAVE,MAAUA,oIAlBAI,MACAC,oBACAC,WAELC,EAAWC,IAQXC,GAAeC,EAASC,QACvBP,IAAUO,SAAc,IAClB,OAAQD,iIAPXC,EAAQT,EAAgBU,cAA6B,WAAdC,EAAEC,iBAC5CH,MAAmBT,EAAgBS,GAAOI,IAAIC,MAAM,QAAQ,aAa3CP,EAAYQ,EAAMC,QAASP,2XCgEvCb,KAAcA,KAASA,sQAAvBA,KAAcA,KAASA,ydAQdA,MAASG,WACQH,MAASqB,YAItBrB,oDAY0BA,YACnBA,MAASQ,aACVR,MAASQ,OAAOM,iCACdd,8wBAJsCA,KAAesB,aAAa,EAAI,0QAhBlFpB,MAASC,qCACQD,MAASmB,mBAItBnB,iIAY0BA,sBACnBA,MAASM,uBACVN,MAASM,OAAOM,2DAHwBZ,KAAeoB,aAAa,EAAI,2IAVzEtB,yGAAAE,oMAEiBF,oCAAqC,4BAGjCA,qaAHJE,kEAGIA,yPAlBrBF,gHAAAE,qKAH7BA,sUAzEGqB,GAAS,+BACTC,EACAC,EACAC,EACAC,sEAEAC,EADAC,GAAQ,QAGNC,WACFJ,EAAaK,EAAMC,MAAMC,IAAI,aAC7BN,EAAoBO,EAAmBR,KA6BxCS,QAAoBC,EAAUxB,KACzBwB,MAAqBC,EAAeC,cAG9BC,QAAYC,iBAAiBJ,mBAA0BxB,oSACvD6B,QAAYF,EAAIG,UAEnBD,EAAIrB,eAAgBqB,YACRE,MAAM,qBACvBC,SACQ/B,EAAQyB,EAAWxB,cAAeC,EAAE,KAAOqB,OAC9CvB,EAAQ,aAAUgB,GAAQ,aAC7BS,EAAWzB,GAAO,GAAGgC,wBACrBP,EAAWzB,GAAO,GAAGiC,uBAAwBC,MAAOC,0BAEpDnB,GAAQ,OACEc,MAAMC,YASVd,aACIA,8CAEZD,QACFA,GAAQ,OACRoB,EAAUZ,EAAeC,2BAxDAF,EAAUc,KAC/Bd,MAAqBC,EAAeC,gBAG5Ba,IAAI,eACNZ,QAAYC,iBAAiBJ,sBAA6Bc,KAC1DT,QAAYF,EAAIG,UAEnBD,EAAIW,YAAcX,EAAIjC,kBACrBgB,EAAeiB,EAAIjC,OAAO,GAAGY,aAC7BK,QAAiBU,EAAWC,EAAUZ,IAC/BiB,YAEGE,MAAMF,SAEhBG,SACE/B,EAAQyB,EAAWxB,cAAeC,EAAE,KAAOqB,OAC9CvB,EAAQ,aAAUgB,GAAQ,aAC7BS,EAAWzB,GAAO,GAAGgC,wBACrBP,EAAWzB,GAAO,GAAGiC,uBAAwBC,MAAOC,0BAEpDnB,GAAQ,OACEc,MAAMC,WAwBSS,QAC7B7B,EAAe6B,EAAEC,YACjB7B,QAAiBU,EAAWc,EAASzB,mEAyCqBT,EAAEK,UAAYI"}