{"version":3,"file":"search.svelte-d51dee49.js","sources":["../../../../../src/routes/search.svelte"],"sourcesContent":["<script>\n    import { onMount, afterUpdate } from 'svelte'\n\n    import { page } from '$app/stores'\n    import { chosen } from '$lib/Stores/memoryStore'\n    import { instances } from '$lib/Stores/localStore'\n    import { chooseInstance, Fetcher, instanceFailedRequest } from '$lib/helper'\n    import countryCodes from '$lib/iso3166countryCodes'\n\n    import AsyncError from '$lib/Components/AsyncError.svelte'\n    import AsyncLoading from '$lib/Components/AsyncLoading.svelte'\n    import Videos from '$lib/Components/Videos.svelte'\n    import Filter from '$lib/UI/Filter.svelte'\n    \n    let error\n    let loading\n    let retry = false\n\n    let searchQuery\n    let searchResult\n    let searchFilters = {\n        sortBy: '',\n        uploadDate: '',\n        duration: '',\n        type: 'video',\n        country: ''\n    }\n\n    const buildSearchQuery = params => {\n        let queryString = '&'\n        Object.keys(params).forEach(param => {\n            if(params[param]) queryString += `${param}=${params[param]}&`\n        })\n        return queryString.slice(0, -1)\n    }\n\n    const fetcher = new Fetcher($chosen, `/search/?q=${searchQuery}${buildSearchQuery(searchFilters)}`)\n    fetcher.on('start', () => loading = true)\n    fetcher.on('ok', data => {\n        error = loading = false\n        searchResult = data\n    })\n    fetcher.on('err', err => {\n        console.log('search:fetchError', err, 'dev')\n        loading = false\n        error = err\n        const updated = instanceFailedRequest($instances, $chosen)\n        if(updated) $instances = updated\n        retry = true\n    })\n\n    const runFetcher = (instance, query, params) => {\n        if(!instance || !query) return\n        fetcher.instance = instance\n        fetcher.url = `/search/?q=${searchQuery}${buildSearchQuery(params)}`\n        fetcher.go()\n    }\n        \n    onMount(() => searchQuery = $page.query.get('q'))\n    afterUpdate(() => searchQuery = $page.query.get('q'))\n\n    $: runFetcher($chosen, searchQuery, searchFilters)\n    $: if(retry) {\n        retry = false\n        $chosen = chooseInstance($instances)\n        runFetcher($chosen, searchQuery, searchFilters)\n    }\n\n    const sortByOptions = ['', 'relevance', 'rating', 'upload_date', 'view_count']\n    const dateOptions = ['', 'hour', 'today', 'week', 'month', 'year']\n    const durationOptions = ['', 'short', 'long']\n    const typeOptions = ['all', 'channel', 'playlist','video']\n    //todo multiselect\n    const featuresOptions = ['hd', 'subtitles', 'creative_commons', '3d', 'live', 'purchased', '4k', '360', 'location', 'hdr']\n</script>\n\n<div class=\"container\">\n    <div class=\"filters\">\n        <Filter label=\"Type:\" selected={searchFilters.type} options={typeOptions} on:change={e => searchFilters.type = e.detail } />\n        <Filter label=\"Sort by:\" selected={searchFilters.sortBy} options={sortByOptions} on:change={e => searchFilters.sortBy = e.detail} margin />\n        <Filter label=\"Upload date:\" selected={searchFilters.uploadDate} options={dateOptions} on:change={e => searchFilters.uploadDate = e.detail} margin />\n        <Filter label=\"Duration:\" selected={searchFilters.duration} options={durationOptions} on:change={e => searchFilters.duration = e.detail} margin />\n        <Filter label=\"Country:\" selected={searchFilters.country} options={countryCodes}  on:change={e => searchFilters.country = e.detail} margin />\n        <!-- <div class=\"features\">\n            <Select items={featuresOptions} placeholder=\"Select features\" isMulti />\n        </div> -->\n    </div>\n    <div class=\"search\">\n        {#if searchQuery}\n            {#if loading}\n                <AsyncLoading chosen={$chosen} />\n            {:else}\n                {#if !error}\n                    <Videos videos={searchResult} chosen={$chosen} />\n                {:else}\n                    <AsyncError {error} />\n                {/if}\n            {/if}\n        {/if}\n    </div>\n</div>\n\n<style>\n.filters {\n    display: flex;\n}\n@media (max-width: 600px) {\n    .filters {\n        flex-direction: column;\n    }\n}\n</style>"],"names":["ctx2","ctx","type","sortBy","uploadDate","duration","country","countryCodes","error","loading","searchQuery","searchResult","retry","searchFilters","buildSearchQuery","queryString","keys","params","forEach","param","slice","fetcher","Fetcher","$chosen","on","data","log","err","updated","instanceFailedRequest","$instances","runFetcher","instance2","query","instance","url","go","$page","get","chooseInstance","e","detail"],"mappings":"wvBAyFiBA,OAGKA,qnBACcC,YAAsBA,gHAAtBD,qBAAsBA,oJAHpBC,+GAAAD,qLAZEC,KAAcC,aAAeD,wEAC1BA,KAAcE,eAAiBF,sFAC3BA,KAAcG,mBAAqBH,mFACtCA,KAAcI,iBAAmBJ,kFAClCA,KAAcK,gBAAkBC,2CAM9DN,yvBAV2BD,KAAcE,4CACXF,KAAcG,8CACVH,KAAcI,kDACjBJ,KAAcK,gDACfL,KAAcM,mBAM5CN,sZA1ELQ,EACAC,uEAGAC,EACAC,EAHAC,GAAQ,EAIRC,GACAV,OAAQ,GACRC,WAAY,GACZC,SAAU,GACVH,KAAM,QACNI,QAAS,UAGPQ,UACEC,EAAc,kBACXC,KAAKC,GAAQC,aACbD,EAAOE,WAA0BA,KAASF,EAAOE,UAEjDJ,EAAYK,MAAM,OAGvBC,MAAcC,EAAQC,gBAAuBb,IAAcI,EAAiBD,QAC1EW,GAAG,iBAAef,GAAU,OAC5Be,GAAG,cACPhB,MAAQC,GAAU,QAClBE,EAAec,QAEXD,GAAG,mBACCE,IAAI,oBAAqBC,EAAK,WACtClB,GAAU,OACVD,EAAQmB,SACFC,EAAUC,EAAsBC,EAAYP,GAC/CK,OAASE,EAAaF,UACzBhB,GAAQ,YAGNmB,GAAcC,EAAUC,EAAOhB,KAC7Be,GAAaC,MACTC,SAAWF,IACXG,kBAAoBzB,IAAcI,EAAiBG,OACnDmB,kBAGE1B,EAAc2B,EAAMJ,MAAMK,IAAI,mBAC1B5B,EAAc2B,EAAMJ,MAAMK,IAAI,iDAG1C1B,SACFA,GAAQ,OACRW,EAAUgB,EAAeT,QACdP,EAASb,EAAaG,oBAJvBU,EAASb,EAAaG,kBAOb,GAAI,YAAa,SAAU,cAAe,eAC5C,GAAI,OAAQ,QAAS,OAAQ,QAAS,SAClC,GAAI,QAAS,SACjB,MAAO,UAAW,WAAW,oBAO4CA,EAAcX,KAAOsC,EAAEC,iBAChB5B,EAAcV,OAASqC,EAAEC,iBACnB5B,EAAcT,WAAaoC,EAAEC,iBAC9B5B,EAAcR,SAAWmC,EAAEC,iBAC/B5B,EAAcP,QAAUkC,EAAEC"}